name: Github Release
on: push

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Release Draft
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const response = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              draft: true
            });
            console.log(response.data);

      - name: Get Previous Release
        id: get_previous_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const response = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            console.log(response.data[0]);

      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const previousRelease = context.payload.before;
            const currentRelease = context.ref.replace('refs/tags/', '');
            const response = await github.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousRelease,
              head: currentRelease
            });
            const commits = response.data.commits;
            const releaseNotes = commits.map(commit => `- ${commit.commit.message}`).join('\n');
            console.log(releaseNotes);

      - name: Update Release Draft
        id: update_release_draft
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const releaseId = context.outputs.create_release.id;
            const releaseNotes = context.outputs.generate_release_notes;
            const response = await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: releaseNotes
            });
            console.log(response.data);
